// Code generated by Kitex v0.6.2. DO NOT EDIT.

package servicex

import (
	"context"
	"fmt"
	multiservice "github.com/cloudwego/kitex-examples/grpcmultiservice/kitex_gen/multiservice"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceXServiceInfo
}

var serviceXServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ServiceX"
	handlerType := (*multiservice.ServiceX)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatX": kitex.NewMethodInfo(chatXHandler, newChatXArgs, newChatXResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "multiservice",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func chatXHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(multiservice.RequestX)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(multiservice.ServiceX).ChatX(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChatXArgs:
		success, err := handler.(multiservice.ServiceX).ChatX(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChatXResult)
		realResult.Success = success
	}
	return nil
}
func newChatXArgs() interface{} {
	return &ChatXArgs{}
}

func newChatXResult() interface{} {
	return &ChatXResult{}
}

type ChatXArgs struct {
	Req *multiservice.RequestX
}

func (p *ChatXArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(multiservice.RequestX)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChatXArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChatXArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChatXArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChatXArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChatXArgs) Unmarshal(in []byte) error {
	msg := new(multiservice.RequestX)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChatXArgs_Req_DEFAULT *multiservice.RequestX

func (p *ChatXArgs) GetReq() *multiservice.RequestX {
	if !p.IsSetReq() {
		return ChatXArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChatXArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatXArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChatXResult struct {
	Success *multiservice.ReplyX
}

var ChatXResult_Success_DEFAULT *multiservice.ReplyX

func (p *ChatXResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(multiservice.ReplyX)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChatXResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChatXResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChatXResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChatXResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChatXResult) Unmarshal(in []byte) error {
	msg := new(multiservice.ReplyX)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChatXResult) GetSuccess() *multiservice.ReplyX {
	if !p.IsSetSuccess() {
		return ChatXResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChatXResult) SetSuccess(x interface{}) {
	p.Success = x.(*multiservice.ReplyX)
}

func (p *ChatXResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatXResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatX(ctx context.Context, Req *multiservice.RequestX) (r *multiservice.ReplyX, err error) {
	var _args ChatXArgs
	_args.Req = Req
	var _result ChatXResult
	if err = p.c.Call(ctx, "ChatX", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
