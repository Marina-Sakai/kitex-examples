// Code generated by Kitex v0.6.2. DO NOT EDIT.

package servicea

import (
	"context"
	"fmt"
	multiservice "github.com/cloudwego/kitex-examples/grpcmultiservice/kitex_gen/multiservice"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceAServiceInfo
}

var serviceAServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ServiceA"
	handlerType := (*multiservice.ServiceA)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatA": kitex.NewMethodInfo(chatAHandler, newChatAArgs, newChatAResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "multiservice",
	}
	extra["streaming"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func chatAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st := arg.(*streaming.Args).Stream
	stream := &serviceAChatAServer{st}
	return handler.(multiservice.ServiceA).ChatA(stream)
}

type serviceAChatAClient struct {
	streaming.Stream
}

func (x *serviceAChatAClient) Send(m *multiservice.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *serviceAChatAClient) Recv() (*multiservice.Reply, error) {
	m := new(multiservice.Reply)
	return m, x.Stream.RecvMsg(m)
}

type serviceAChatAServer struct {
	streaming.Stream
}

func (x *serviceAChatAServer) Send(m *multiservice.Reply) error {
	return x.Stream.SendMsg(m)
}

func (x *serviceAChatAServer) Recv() (*multiservice.Request, error) {
	m := new(multiservice.Request)
	return m, x.Stream.RecvMsg(m)
}

func newChatAArgs() interface{} {
	return &ChatAArgs{}
}

func newChatAResult() interface{} {
	return &ChatAResult{}
}

type ChatAArgs struct {
	Req *multiservice.Request
}

func (p *ChatAArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(multiservice.Request)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChatAArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChatAArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChatAArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChatAArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChatAArgs) Unmarshal(in []byte) error {
	msg := new(multiservice.Request)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChatAArgs_Req_DEFAULT *multiservice.Request

func (p *ChatAArgs) GetReq() *multiservice.Request {
	if !p.IsSetReq() {
		return ChatAArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChatAArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatAArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChatAResult struct {
	Success *multiservice.Reply
}

var ChatAResult_Success_DEFAULT *multiservice.Reply

func (p *ChatAResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(multiservice.Reply)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChatAResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChatAResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChatAResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChatAResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChatAResult) Unmarshal(in []byte) error {
	msg := new(multiservice.Reply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChatAResult) GetSuccess() *multiservice.Reply {
	if !p.IsSetSuccess() {
		return ChatAResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChatAResult) SetSuccess(x interface{}) {
	p.Success = x.(*multiservice.Reply)
}

func (p *ChatAResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatAResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatA(ctx context.Context) (ServiceA_ChatAClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ChatA", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &serviceAChatAClient{res.Stream}
	return stream, nil
}
